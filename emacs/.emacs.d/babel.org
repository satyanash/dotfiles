#+TITLE: Satyajeet's emacs
#+AUTHOR: Satyajeet

** Load Private Variables
   We may have a site specific init for some private configuration.
   #+begin_src emacs-lisp
     (let ((private-init-file "~/.emacs.d/private-init.el"))
       (when (file-exists-p private-init-file)
         (load-file private-init-file)))
   #+end_src
** Fix word boundaries
   Fix the default syntax table and that of various modes to treat underscores more like vim.
   This fixes issues with word commands not working on identifiers containing an underscore.

   #+begin_src emacs-lisp
     (modify-syntax-entry ?_ "w" (standard-syntax-table))
     ;; python
     (add-hook 'python-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
     ;; ruby
     (add-hook 'ruby-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
     ;; Javascript
     (add-hook 'js2-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
     ;; Crystal
     (add-hook 'crystal-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
   #+end_src
** Fix Emacs Help Behaviour
   All help windows will gain focus when they're shown.
   #+begin_src emacs-lisp
     (setq help-window-select t)
   #+end_src
** Fix temp file behaviour
   - don't clobber symlinks
   - stop littering the fs tree
   - use versioned backups
   - don't create lock files
   #+begin_src emacs-lisp
     (setq backup-by-copying t
           backup-directory-alist '(("." . "~/.saves/"))
           delete-old-versions t
           kept-new-versions 6
           kept-old-versions 2
           version-control t
           create-lockfiles nil)
   #+end_src

** Git
   #+begin_src emacs-lisp
     (use-package magit
       :straight t
       :config
       (global-set-key (kbd "C-x g") 'magit-status))
   #+end_src

** Dark Side [0/2]

   Evil no longer ships with =undo-tree=, so we install it ourselves.

   #+begin_src emacs-lisp
     (use-package undo-tree
       :straight t
       :config (global-undo-tree-mode))
   #+end_src

   Configure =evil= and =evil-collection=.

   - [ ] =evil-want-C-u-scroll= does not work, for some reason. We explicitly bind =C-u= for now.
   - Disable =dabbrev-case-fold-search= so that =C-n= and =C-p= based completion works as expected.
   - Disable =evil-want-keybinding= because we will use =evil-collection= to set keybindings.
   - Make sure vertical and horizontal splits open to the right and bottom, respectively.
   - Use =evil-search= as our =evil-search-module=, to make the editor behave more like Vim.
   - Fix =C-p= and =C-n= to move to previous and next line in normal mode.
   - =C-h= should keep working like Vim. We don't care about emacs "help" when in insert mode.
     - Fix =C-h= to delete backward char in insert mode.
     - Fix =C-h= to delete backward char in ex mode.
   - Fix =C-w= to delete backward word in ex mode.
   - [ ] Fix =C-j= to behave similar to =RET= in ex mode.

   #+begin_src emacs-lisp
     (use-package evil
       :straight t
       :init (setq evil-want-C-u-scroll t
                   evil-undo-system 'undo-tree
                   dabbrev-case-fold-search nil
                   evil-want-keybinding nil
                   evil-vsplit-window-right t
                   evil-split-window-below t
                   evil-search-module 'evil-search)
       :config
       (evil-mode 1)

       (define-key evil-normal-state-map (kbd "C-p") 'evil-previous-line)
       (define-key evil-normal-state-map (kbd "C-n") 'evil-next-line)
       (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)

       (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char)

       (define-key evil-ex-completion-map (kbd "C-h") 'evil-ex-delete-backward-char)
       (define-key evil-ex-completion-map (kbd "C-w") 'evil-delete-backward-word)
       :hook (evil-local-mode . turn-on-undo-tree-mode))

     (use-package evil-collection
       :straight t
       :after (evil magit)
       :config
       (evil-collection-init))
   #+end_src

** Custom Error Handler
   We have a custom error handler to ignore all those annoying errors like:
   - Beginning of Buffer
   - End of Buffer
   - Beginning of Line
   - End of Line
   - Text is Read Only, (when deleting backwards on a prompt)
   #+begin_src emacs-lisp
     (setq command-error-function
           (lambda (data context caller)
             "Ignore the various errors related to read-only text and motion; pass the rest to the default handler."
             (let* ((err (car data))
                    (skip-errors '(text-read-only
                                   beginning-of-buffer
                                   end-of-buffer
                                   beginning-of-line
                                   end-of-line))
                    (err-skippable? (member err skip-errors)))
               (unless err-skippable?
                 (command-error-default-function data context caller)))))
   #+end_src
** Org Mode
   Setup language support in org-mode.
   #+begin_src emacs-lisp
     (with-eval-after-load 'org
       (org-babel-do-load-languages 'org-babel-load-languages
                                    '((emacs-lisp . t)
                                      (plantuml . t))))
   #+end_src

   Reload inline images on evaluating a code block.
   #+begin_src emacs-lisp
     (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
   #+end_src

   Configure plantuml support in org-mode.
   #+begin_src emacs-lisp
     (setq org-plantuml-jar-path
           (expand-file-name "/usr/share/java/plantuml/plantuml.jar"))
   #+end_src

   Use fancy bullets instead of asterisks.
   #+begin_src emacs-lisp
     (use-package org-bullets
       :straight t
       :after org
       :hook (org-mode . org-bullets-mode))
   #+end_src

   Make Org and Org Agenda play nice with =evil=.
   #+begin_src emacs-lisp
     (use-package evil-org
       :straight t
       :after org
       :config
       (add-hook 'org-mode-hook 'evil-org-mode)
       (add-hook 'evil-org-mode-hook
                 (lambda ()
                   (evil-org-set-key-theme)))
       (require 'evil-org-agenda)
       (evil-org-agenda-set-keys))
   #+end_src

** Font
    Use "Monego", a modification of the classic "Monaco" but with support for bold, italic etc.
    Get it from <https://github.com/cseelus/monego>.
    #+begin_src emacs-lisp
      (set-face-attribute 'default nil :height 150 :family "Monego")
    #+end_src

** Cosmetics
   Disable tool, menu and scroll bars.
   #+begin_src emacs-lisp
     (tool-bar-mode   -1)
     (menu-bar-mode   -1)
     (scroll-bar-mode -1)
   #+end_src

   Use relative line numbering.
   #+begin_src emacs-lisp
     (setq display-line-numbers-type 'relative)
     (global-display-line-numbers-mode)
   #+end_src

   Inhibit the startup screen.
   #+begin_src emacs-lisp
     (setq inhibit-startup-screen t)
   #+end_src

   Disable the audio bell and flash only the mode line.
   #+begin_src emacs-lisp
     (setq visible-bell t)

     (use-package mode-line-bell
       :straight t
       :config (mode-line-bell-mode))
   #+end_src

   Start "maximized".
   #+begin_src emacs-lisp
     (add-to-list 'default-frame-alist '(fullscreen . maximized))
   #+end_src

   Get that fancy dark transparent title bar on OSX.
   #+begin_src emacs-lisp
     (when (eq system-type 'darwin)
       (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
       (add-to-list 'default-frame-alist '(ns-appearance . dark)))
   #+end_src

   Disable all fringe text continuation indicators.
   #+begin_src emacs-lisp
     (setf (cdr (assq 'continuation fringe-indicator-alist)) '(nil nil))
   #+end_src

** Theming
   Load =vivid-chalk=, a port of the vim =vivid-chalk= theme which in turn was ported
   from TextMate's Vibrant Ink.
   #+begin_src emacs-lisp
     (load-theme 'vivid-chalk t)
   #+end_src

   Get all available themes with =(custom-available-themes)=.

** Line Endings
   Ensure a newline at the end when writing a file.
   #+begin_src emacs-lisp
     (setq-default require-final-newline t)
   #+end_src

** Indentation
   Disable tabs when indenting a region
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src

   Advice =align-regexp= to not insert tabs.
   #+begin_src emacs-lisp
     (defadvice align-regexp (around align-regexp-with-spaces)
       "Never use tabs for alignment."
       (let ((indent-tabs-mode nil))
         ad-do-it))
     (ad-activate 'align-regexp)
   #+end_src

** Window Management
   =golden-ratio= keeps window sizes in check.
   Configure extra evil commands to also trigger resizing.
   #+begin_src emacs-lisp
     (use-package golden-ratio
       :straight t
       :init (setq golden-ratio-extra-commands
                   '(evil-window-next
                     evil-window-prev
                     evil-window-right
                     evil-window-left
                     evil-window-down
                     evil-window-up)
                   golden-ratio-auto-scale t
                   window-combination-resize t)
       :config
       (golden-ratio-mode 1))
   #+end_src

** Searching & Sorting
   Fuzzy searching, sorting with =ido= and =helm= where possible.
   #+begin_src emacs-lisp
   (use-package ido
     :straight t
     :init (setq ido-enable-flex-matching t)
     :config
     (ido-mode t))

   (use-package helm
     :straight t
     :init
     (setq helm-always-two-windows t)
     :config
     (define-key helm-map (kbd "C-d") 'helm-next-page)
     (define-key helm-map (kbd "C-u") 'helm-previous-page))
   #+end_src

   Integrate with grep-like tools, mostly =ag=.
   #+begin_src emacs-lisp
     (use-package ag :straight t)
     (use-package helm-ag
       :straight t
       :after helm)
   #+end_src

** Project Management
   - Project management through =projectile=.
   - Augment its capabilities with =helm-projectile=.
   - Opens the project root in =dir= when switching to it.
   - Configure switching and searching projects and finding files.
   #+begin_src emacs-lisp
     (use-package projectile
       :straight t
       :init
       (setq projectile-switch-project-action #'(lambda () (dired (projectile-project-root))))
       :config
       (projectile-mode +1)
       (define-key projectile-mode-map (kbd "M-8") 'projectile-switch-project)
       (define-key projectile-mode-map (kbd "M-*") 'projectile-ag)
       (define-key projectile-mode-map (kbd "C-8") 'projectile-find-file))

     (use-package helm-projectile
       :straight t
       :after '(helm projectile)
       :init
       (setq helm-projectile-fuzzy-match t
             projectile-completion-system 'helm)
       :config)
   #+end_src

** Language Support
   - LSP support used for Ruby, Golang and Terraform.
   - Following servers must be present on the PATH:

   | Language   | bin                                   |
   |------------+---------------------------------------|
   | Ruby       | =solargraph=                          |
   | Golang     | =gopls=                               |
   | Typescript | =typescript-language-server=          |
   | Crystal    | =/bin/crystalline=                    |
   | Java       | =jdtls= auto-setup works              |
   | Terraform  | =terraform-lsp=                       |
   | Python     | =pip3 install python-lsp-server[all]= |

   #+begin_src emacs-lisp
     (use-package flycheck
       :straight t)

     (use-package lsp-mode
       :straight t
       :init (setq lsp-solargraph-use-bundler nil
                   lsp-clients-crystal-executable '("/bin/crystalline"))
       :hook ((ruby-mode . lsp)
              (go-mode . lsp-deferred)
              (terraform-mode . lsp)
              (typescript-mode . lsp)
              (js-mode . lsp)
              (crystal-mode . lsp)
              (python-mode . lsp)
              (java-mode . lsp)))
   #+end_src

** Editing Experience
   - Code folding through =origami=.
   - =smartparens= for lisps.
   #+begin_src emacs-lisp
     (use-package origami
       :straight t)

     (use-package lsp-origami
       :straight t)

     (use-package smartparens
       :straight t
       :hook ((clojure-mode . smartparens-strict-mode)
              (emacs-lisp-mode . smartparens-strict-mode)))

     (use-package evil-smartparens
       :straight t
       :hook ((clojure-mode . evil-smartparens-mode)
              (emacs-lisp-mode . evil-smartparens-mode)))
   #+end_src

   - Highlight matching parentheses.
   - Show line and column numbers in mode line.
   #+begin_src emacs-lisp
     (show-paren-mode t)
     (line-number-mode t)
     (column-number-mode t)
   #+end_src

** Whitespace
   #+begin_src emacs-lisp
     (use-package whitespace
       :straight t
       :init
       (setq whitespace-style '(face tabs empty trailing))
       :hook ((prog-mode . whitespace-mode)
              (text-mode . whitespace-mode))
       :config
       (add-hook 'before-save-hook #'whitespace-cleanup))
   #+end_src

** Emacs Lisp Support
   Fix scratch buffer default message.
   #+begin_src emacs-lisp
  (setq initial-scratch-message ";;;(setq eval-expression-print-level 5\n;;;      eval-expression-print-length 200)\n\n\n")
   #+end_src
   Auto format elisp
   #+begin_src emacs-lisp
     (use-package elisp-format :straight t)
   #+end_src
** Golang Support
   - Use =goimports= for auto-formatting code.
   - Also setup a Go Playground.

   #+begin_src emacs-lisp
     (use-package go-mode
       :straight t
       :mode "\\.go\\'"
       :init (setq gofmt-command "goimports")
       :config (add-hook 'before-save-hook 'gofmt-before-save))

     (use-package go-playground :straight t)
   #+end_src

** Plain Text Writing
*** Skeletons for Empty Files
    Setup note taking skeletons for markdown and empty org files.
    #+begin_src emacs-lisp
      (defun satyanash--titleize (filename)
        "Adds spacing and title case to input file name."
        (capitalize
         (replace-regexp-in-string
          "-"
          " "
          (file-name-base (or filename "unknown"))
          nil
          'literal)))

      (use-package autoinsert
        :straight t
        :hook (find-file . auto-insert)
        :init (setq auto-insert-alist ()
                    auto-insert-mode t
                    auto-insert-query nil
                    auto-insert t)
        :config
        (define-auto-insert
          '(markdown-mode . "Markdown Note")
          '("Markdown Note:"
            "---" \n
            "title: " (satyanash--titleize (buffer-file-name)) \n
            "date: " (format-time-string "%Y-%m-%dT%T%z") \n
            "tags: " _ \n
            "---" \n))
        (define-auto-insert
          '(org-mode . "Org Mode Note")
          '("Org Mode Note:"
            "#+TITLE: " (satyanash--titleize (buffer-file-name)) \n
            "#+DATE: " (format-time-string "%Y-%m-%dT%T%z") \n
            "#+TAGS: " _)))
    #+end_src

*** Writing Quality
    #+begin_src emacs-lisp
      (use-package artbollocks-mode
        :straight t)
    #+end_src

    #+begin_src emacs-lisp
      (use-package writegood-mode
        :straight t)
    #+end_src

    #+begin_src emacs-lisp
      (use-package wc-mode
        :straight t)
    #+end_src
*** Focused Writing Mode
    #+begin_src emacs-lisp
      (use-package writeroom-mode
        :straight t
        :init (setq writeroom-fullscreen-effect 'maximized
                    writeroom-width 64)
        :config
        (add-hook 'writeroom-mode-hook #'visual-line-mode)
        (add-hook 'writeroom-mode-hook #'flyspell-mode)
        (add-hook 'writeroom-mode-hook #'artbollocks-mode)
        (add-hook 'writeroom-mode-hook
                  (lambda ()
                    (if writeroom-mode
                        (progn
                          (display-line-numbers-mode -1)
                          (langtool-check-buffer)
                          (add-hook 'after-save-hook #'langtool-check-buffer nil 'buffer-local))
                      (display-line-numbers-mode)
                      (langtool-check-done)
                      (langtool-server-stop)
                      (remove-hook 'after-save-hook #'langtool-check-buffer 'buffer-local))))
        (with-eval-after-load 'writeroom-mode
          (define-key writeroom-mode-map (kbd "C-M--") #'writeroom-decrease-width)
          (define-key writeroom-mode-map (kbd "C-M-=") #'writeroom-increase-width)
          (define-key writeroom-mode-map (kbd "C-M-0") #'writeroom-adjust-width)))
    #+end_src
*** Auto Correct
    #+begin_src emacs-lisp
      (use-package flyspell
        :straight t
        :config
        (eval-after-load 'flyspell-mode
          (define-key flyspell-mode-map (kbd "<f6>") #'flyspell-auto-correct-word)))
    #+end_src
*** Grammar
    #+begin_src emacs-lisp
      (use-package langtool
        :straight (langtool :type git
                            :host github :repo "mhayashi1120/Emacs-langtool"
                            :fork (:host github :repo "ejuarezg/Emacs-langtool"))
        :init
        (pcase system-type
          ('gnu/linux
           (setq langtool-java-classpath
                 "/usr/share/languagetool:/usr/share/java/languagetool/*"
                 langtool-language-tool-server-jar
                 "/usr/share/java/languagetool/languagetool-server.jar"))
          ('darwin
           (setq
            langtool-language-tool-jar
            "/usr/local/Cellar/languagetool/5.0/libexec/languagetool-commandline.jar"))))
    #+end_src

** Markup / Config File Support
   - For Markdown, use =kramdown= and enable math processing.
   - Need TOML for telegraf config files.
   - Need jsonnet for [[https://github.com/grafana/grafonnet-lib][grafonnet]] to create grafana dashboards.

   #+begin_src emacs-lisp
     (use-package markdown-mode
       :straight t
       :init (setq markdown-command "kramdown"
                   markdown-enable-math t))

     (use-package yaml-mode      :straight t)
     (use-package json-mode      :straight t)
     (use-package terraform-mode :straight t)
     (use-package toml-mode      :straight t)
     (use-package jsonnet-mode   :straight t)
   #+end_src

** Web Mode
   #+begin_src emacs-lisp
     (use-package web-mode
       :straight t
       :init (setq web-mode-markup-indent-offset 2
                   web-mode-css-indent-offset 2
                   web-mode-code-indent-offset 2)
       :mode ("\\.html.erb\\'"
              "\\.html\\'"))
   #+end_src
** PHP Support
   PHP editing support.
   #+begin_src emacs-lisp
     (use-package php-mode
       :straight t)
   #+end_src
** Clojure Support
   Use =cider= and also enable font locking for stdlib functions.
   #+begin_src emacs-lisp
     (use-package clojure-mode
       :straight t)

     (use-package clojure-mode-extra-font-locking
       :straight t)

     (use-package cider
       :straight t
       :hook (clojure-mode . cider-mode))
   #+end_src
** Configure basic Dockerfile support
   I don't need direct integration with docker yet.
   #+begin_src emacs-lisp
     (use-package dockerfile-mode
       :straight t
       :mode "Dockerfile\\'")
   #+end_src
** Setup an embedded terminal
   =vterm= is fast and works well with ncurses UIs.
   Also configure colors pulled from iTerm2.

   #+begin_src emacs-lisp
     (use-package vterm
       :straight t
       :config
       ;; Pulled from iTerm2 ANSI color scheme
       (defconst color-black   "#000000")
       (defconst color-red     "#c91b00")
       (defconst color-green   "#00c200")
       (defconst color-yellow  "#c7c400")
       (defconst color-blue    "#0082ff")
       (defconst color-magenta "#c930c7")
       (defconst color-cyan    "#00c5c7")
       (defconst color-white   "#c7c7c7")

       ;; Custom Colors
       (defconst color-orange  "#ff9900")

       ;; Configure Face Attributes for vterm
       (set-face-attribute 'vterm-color-black   nil :foreground color-black   :background color-black)
       (set-face-attribute 'vterm-color-red     nil :foreground color-red     :background color-black)
       (set-face-attribute 'vterm-color-green   nil :foreground color-green   :background color-black)
       (set-face-attribute 'vterm-color-yellow  nil :foreground color-yellow  :background color-black)
       (set-face-attribute 'vterm-color-blue    nil :foreground color-blue    :background color-black)
       (set-face-attribute 'vterm-color-magenta nil :foreground color-magenta :background color-black)
       (set-face-attribute 'vterm-color-cyan    nil :foreground color-cyan    :background color-black)
       (set-face-attribute 'vterm-color-white   nil :foreground color-white   :background color-black))
   #+end_src

** Install package-lint
   This is useful for linting code before submission to MELPA.

   #+begin_src emacs-lisp
     (use-package package-lint :straight t)
   #+end_src

** Setup Nyan Mode
   Make sure it is animated and wavy!

   #+begin_src emacs-lisp
     (use-package nyan-mode
       :straight t
       :init (setq nyan-animate-nyancat t
                   nyan-wavy-trail t)
       :config (nyan-mode))
   #+end_src

** Setup leetcode environment
   Use golang as the preferred language.
   This has spooky behaviour where it pulls your cookies from the Chrome/Firefox cookie store.
   Doesn't seem to require any permission to do this for FF!

   #+begin_src emacs-lisp
     (use-package leetcode
       :init (setq leetcode-prefer-language "python3")
       :straight t)
   #+end_src
** Web Wowser
   #+begin_src emacs-lisp
     (use-package eww
       :straight t
       :config
       (add-hook 'eww-after-render-hook #'visual-line-mode))
   #+end_src

** Configure restclient
   Use this for making fancy REST queries and playing with APIs.
   #+begin_src emacs-lisp
     (use-package restclient :straight t)
   #+end_src

** Typescript
   Basic typescript support.
   #+begin_src emacs-lisp
     (use-package typescript-mode
       :straight t)
   #+end_src

** Crystal
   Basic crystal support.
   #+begin_src emacs-lisp
     (use-package crystal-mode
       :straight t)
   #+end_src

** Java
   #+begin_src emacs-lisp
     (use-package lsp-java
       :straight t)
   #+end_src
